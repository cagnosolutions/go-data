package pager

import (
	"strconv"
)

var uint8Tbl = [8]string{
	"00000001",
	"00000010",
	"00000100",
	"00001000",
	"00010000",
	"00100000",
	"01000000",
	"10000000",
}

var uint16Tbl = [16]string{
	"0000000000000001",
	"0000000000000010",
	"0000000000000100",
	"0000000000001000",
	"0000000000010000",
	"0000000000100000",
	"0000000001000000",
	"0000000010000000",
	"0000000100000000",
	"0000001000000000",
	"0000010000000000",
	"0000100000000000",
	"0001000000000000",
	"0010000000000000",
	"0100000000000000",
	"1000000000000000",
}

var uint32Tbl = [32]string{
	"00000000000000000000000000000001",
	"00000000000000000000000000000010",
	"00000000000000000000000000000100",
	"00000000000000000000000000001000",
	"00000000000000000000000000010000",
	"00000000000000000000000000100000",
	"00000000000000000000000001000000",
	"00000000000000000000000010000000",
	"00000000000000000000000100000000",
	"00000000000000000000001000000000",
	"00000000000000000000010000000000",
	"00000000000000000000100000000000",
	"00000000000000000001000000000000",
	"00000000000000000010000000000000",
	"00000000000000000100000000000000",
	"00000000000000001000000000000000",
	"00000000000000010000000000000000",
	"00000000000000100000000000000000",
	"00000000000001000000000000000000",
	"00000000000010000000000000000000",
	"00000000000100000000000000000000",
	"00000000001000000000000000000000",
	"00000000010000000000000000000000",
	"00000000100000000000000000000000",
	"00000001000000000000000000000000",
	"00000010000000000000000000000000",
	"00000100000000000000000000000000",
	"00001000000000000000000000000000",
	"00010000000000000000000000000000",
	"00100000000000000000000000000000",
	"01000000000000000000000000000000",
	"10000000000000000000000000000000",
}

var uint64Tbl = [64]string{
	"0000000000000000000000000000000000000000000000000000000000000001",
	"0000000000000000000000000000000000000000000000000000000000000010",
	"0000000000000000000000000000000000000000000000000000000000000100",
	"0000000000000000000000000000000000000000000000000000000000001000",
	"0000000000000000000000000000000000000000000000000000000000010000",
	"0000000000000000000000000000000000000000000000000000000000100000",
	"0000000000000000000000000000000000000000000000000000000001000000",
	"0000000000000000000000000000000000000000000000000000000010000000",
	"0000000000000000000000000000000000000000000000000000000100000000",
	"0000000000000000000000000000000000000000000000000000001000000000",
	"0000000000000000000000000000000000000000000000000000010000000000",
	"0000000000000000000000000000000000000000000000000000100000000000",
	"0000000000000000000000000000000000000000000000000001000000000000",
	"0000000000000000000000000000000000000000000000000010000000000000",
	"0000000000000000000000000000000000000000000000000100000000000000",
	"0000000000000000000000000000000000000000000000001000000000000000",
	"0000000000000000000000000000000000000000000000010000000000000000",
	"0000000000000000000000000000000000000000000000100000000000000000",
	"0000000000000000000000000000000000000000000001000000000000000000",
	"0000000000000000000000000000000000000000000010000000000000000000",
	"0000000000000000000000000000000000000000000100000000000000000000",
	"0000000000000000000000000000000000000000001000000000000000000000",
	"0000000000000000000000000000000000000000010000000000000000000000",
	"0000000000000000000000000000000000000000100000000000000000000000",
	"0000000000000000000000000000000000000001000000000000000000000000",
	"0000000000000000000000000000000000000010000000000000000000000000",
	"0000000000000000000000000000000000000100000000000000000000000000",
	"0000000000000000000000000000000000001000000000000000000000000000",
	"0000000000000000000000000000000000010000000000000000000000000000",
	"0000000000000000000000000000000000100000000000000000000000000000",
	"0000000000000000000000000000000001000000000000000000000000000000",
	"0000000000000000000000000000000010000000000000000000000000000000",
	"0000000000000000000000000000000100000000000000000000000000000000",
	"0000000000000000000000000000001000000000000000000000000000000000",
	"0000000000000000000000000000010000000000000000000000000000000000",
	"0000000000000000000000000000100000000000000000000000000000000000",
	"0000000000000000000000000001000000000000000000000000000000000000",
	"0000000000000000000000000010000000000000000000000000000000000000",
	"0000000000000000000000000100000000000000000000000000000000000000",
	"0000000000000000000000001000000000000000000000000000000000000000",
	"0000000000000000000000010000000000000000000000000000000000000000",
	"0000000000000000000000100000000000000000000000000000000000000000",
	"0000000000000000000001000000000000000000000000000000000000000000",
	"0000000000000000000010000000000000000000000000000000000000000000",
	"0000000000000000000100000000000000000000000000000000000000000000",
	"0000000000000000001000000000000000000000000000000000000000000000",
	"0000000000000000010000000000000000000000000000000000000000000000",
	"0000000000000000100000000000000000000000000000000000000000000000",
	"0000000000000001000000000000000000000000000000000000000000000000",
	"0000000000000010000000000000000000000000000000000000000000000000",
	"0000000000000100000000000000000000000000000000000000000000000000",
	"0000000000001000000000000000000000000000000000000000000000000000",
	"0000000000010000000000000000000000000000000000000000000000000000",
	"0000000000100000000000000000000000000000000000000000000000000000",
	"0000000001000000000000000000000000000000000000000000000000000000",
	"0000000010000000000000000000000000000000000000000000000000000000",
	"0000000100000000000000000000000000000000000000000000000000000000",
	"0000001000000000000000000000000000000000000000000000000000000000",
	"0000010000000000000000000000000000000000000000000000000000000000",
	"0000100000000000000000000000000000000000000000000000000000000000",
	"0001000000000000000000000000000000000000000000000000000000000000",
	"0010000000000000000000000000000000000000000000000000000000000000",
	"0100000000000000000000000000000000000000000000000000000000000000",
	"1000000000000000000000000000000000000000000000000000000000000000",
}

const (
	szUint8_str   = "00000000"
	szUint16_str  = "0000000000000000"
	szUuint32_str = "00000000000000000000000000000000"
	uint64_str    = "0000000000000000000000000000000000000000000000000000000000000000"
)

func genUint8Flags() []uint8 {
	var res []uint8
	for _, b := range uint8Tbl {
		n, err := strconv.ParseUint(b, 2, 8)
		if err != nil {
			panic(err)
		}
		res = append(res, uint8(n))
	}
	return res
}

func genUint16Flags() []uint16 {
	var res []uint16
	for _, b := range uint16Tbl {
		n, err := strconv.ParseUint(b, 2, 16)
		if err != nil {
			panic(err)
		}
		res = append(res, uint16(n))
	}
	return res
}

func genUint32Flags() []uint32 {
	var res []uint32
	for _, b := range uint32Tbl {
		n, err := strconv.ParseUint(b, 2, 32)
		if err != nil {
			panic(err)
		}
		res = append(res, uint32(n))
	}
	return res
}

func genUint64Flags() []uint64 {
	var res []uint64
	for _, b := range uint64Tbl {
		n, err := strconv.ParseUint(b, 2, 64)
		if err != nil {
			panic(err)
		}
		res = append(res, n)
	}
	return res
}
